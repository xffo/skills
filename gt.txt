http://www.liaoxuefeng.com/

>1----------local command----------
>>1.1----------basic command----------
git config --global user.name
git config --global user.email
git init

git add <file>
git commit -m "comment"
git rm
git status 查看仓库状态
git diff
git log
git config --global color.ui true

>>1.2----------reset command----------
git reset --hard HEAD^ 回退到上一个版本就是HEAD^
git reset --hard HEAD~100 往上100个版本
git reset --hard commit_id 指定回到某个版本
git log --pretty=oneline
git reflog 查看命令历史

git checkout -- file 恢复工作区的修改(还没add)
git reset HEAD file 恢复暂存区的修改(已经add, 还没commit)

>>1.3----------branch command----------
git branch 查看分支 
git branch <name> 创建分支
git checkout <name> 切换分支
git checkout -b <name> 创建+切换分支
git merge <name> 合并某分支到当前分支
git merge --no-ff -m "comment" <branch>
git branch -d <name> 删除分支
git branch -D <name> 强行删除

git log --graph 查看分支合并图
git log --graph --pretty=oneline --abbrev-commit
git log --pretty=oneline --abbrev-commit

git stash 把当前工作现场“储藏”起来
git stash apply 恢复，stash内容并不删除
git stash apply stash@{0} 恢复指定的stash
git stash drop 删除
git stash pop 恢复的同时把stash内容也删除
git stash list 查看工作现场

>2----------remote command----------
git remote -v 同步协议 https　git(ssh)
git push origin master 远程同步
git pull <remote> <branch>
git branch --set-upstream dev origin/<branch> 指定本地dev分支与远程origin/dev分支的链接

>>2.1----------https----------
>>>2.1.1----------remote https----------
git remote add origin https://github.com/xffo/skills.git
git remote set-url origin https://github.com/xffo/skills.git
git clone https://github.com/xffo/skills.git

>>>2.1.2----------https over proxy----------
git config --get http.proxy
git config --global http.proxy http://USER:PWD@PROXY_SERVER:PORT
ex: git config --global http.proxy http://SEH13023:1111111111@snd.proxy.nic.fujitsu.com:8080

>>2.2----------ssh----------
>>>2.2.1----------remote ssh----------
git remote add origin git@github.com:xffo/skills.git
git remote set-url origin git@github.com:xffo/skills.git
git clone git@github.com:xffo/skills.git

>>>2.2.2----------generate ssh key----------
ssh-keygen -t rsa -C "hocmystic@gmail.com"
ls ~/.ssh/
clip < ~/.ssh/id_rsa.pub

>>>2.2.3----------ssh over proxy----------
vi ~/.ssh/config
Host github.com
    User git
    Hostname ssh.github.com
    Port 443
    IdentityFile C:/Users/Owner/.ssh/id_rsa
	ProxyCommand connect.exe -H SEH13023@snd.proxy.nic.fujitsu.com:8080 %h %p

ssh -T git@github.com

>3----------mutil work----------
多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

>4----------tag----------
git tag <name> 打一个新标签
git tag -a <tagname> -m "comment" -a指定标签名，-m指定说明文字
git tag -s <tagname> -m "comment" -s用私钥签名一个标签 GnuPG
git tag 查看所有标签
git show <tagname> 查看标签信息

git push origin <tagname> 可以推送一个本地标签
git push origin --tags 可以推送全部未推送过的本地标签
git tag -d <tagname> 可以删除一个本地标签
git push origin :refs/tags/<tagname> 可以删除一个远程标签

>5----------ignore----------
忽略某些文件时，需要编写.gitignore
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理
各种配置 https://github.com/github/gitignore

>6----------alias----------
.gitconfig
$ cat .gitconfig
[alias]
    co = checkout
    ci = commit
    br = branch
    st = status

git config --global alias.<alias> <command>
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
git config --global alias.last 'log -1'

>7----------server----------
Ubuntu Debian
 1 sudo apt-get install git 安装git
 2 sudo adduser git 创建一个git用户，用来运行git服务：
 3 创建证书登录 收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
 4 初始化Git仓库
   先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令
   sudo git init --bare sample.git Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git
   sudo chown -R git:git sample.git
 5 禁用shell登录
   出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行
   git:x:1001:1001:,,,:/home/git:/bin/bash
   改为
   git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
   这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。
 6 克隆远程仓库
   git clone git@server:/srv/sample.git
   
 管理公钥 Gitosis
 管理权限 Gitolite
 
>7----------summary----------
Git Cheat Sheet
http://www.git-tower.com/blog/assets/2013-05-22-git-cheat-sheet/cheat-sheet-large01.png

http://git-scm.com
https://github.com
https://github.com/jyo-ki
http://msysgit.github.io/
http://code.google.com/p/tortoisegit/

http://www.backlog.jp/git-guide/
http://www.liaoxuefeng.com/


